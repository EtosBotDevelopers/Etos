
class embeds:
    def error(error, ctx):
        if type(ctx) == str:
            ctx = ctx
        else:
            ctx = ctx.command
        e = discord.Embed(color=discord.Color.red(), title="Error", description="An unexpected error occurred in the command `{0}`\n\n```py\n{1}```\n\nDon't panic! Our support team can help you.".format(ctx, error))
        e.set_footer(text=str(datetime.datetime.now()))
        return e
    def warning(message):
        e = discord.Embed(color=discord.Color.gold())
        e.add_field(name="Warning", value=message)
        return e
    def invalid_syntax(message="You entered something wrong."):
        e = discord.Embed()
        e.add_field(name="Invalid Syntax", value=message)
        
        return e
    def permission_denied(message="You need a role named `Moderator` to do that."):
        e = discord.Embed()
        e.add_field(name="Permission Denied", value=message)
        e.set_footer(text="you dont have permission to do that")
        return e
    def server_join(server):
        e = discord.Embed(color=discord.Color.green())
        if server.icon_url == "":
            e.set_author(name="Joined server")
        else:
            e.set_author(name="Joined server", icon_url=server.icon_url)
        e.add_field(name="Name", value=server.name)
        e.add_field(name="ID", value=server.id)
        usrs = 0
        bots = 0
        for usr in server.members:
            if usr.bot:
                bots += 1
            else:
                usrs += 1
        e.add_field(name="Users", value="{} members / {} bots".format(usrs, bots))
        e.add_field(name="Owner", value=server.owner.name)
        return e
    def server_leave(server):
        e = discord.Embed(color=discord.Color.red())
        if server.icon_url == "":
            e.set_author(name="Left server")
        else:
            e.set_author(name="Left Server", icon_url=server.icon_url)
        e.add_field(name="Name", value=server.name)
        e.add_field(name="ID", value=server.id)
        usrs = 0
        bots = 0
        for usr in server.members:
            if usr.bot:
                bots += 1
            else:
                usrs += 1
        e.add_field(name="Users", value="{} members / {} bots".format(usrs, bots))
        e.add_field(name="Owner", value=server.owner.name)
        return e
    def _err(e, ctx):
        e = discord.Embed(color=discord.Color.red(), title="Error", description="```{}```".format(e))
        e.add_field(name="Server", value=ctx.message.server.name + " ({})".format(ctx.message.server.id))
        e.add_field(name="Author", value=ctx.message.author)
        e.add_field(name="Command", value=ctx.command)
        e.add_field(name="Owner", value=ctx.message.server.owner.name)
        return e
    def user_kick(author, user, reason, case):
        e = discord.Embed(color=discord.Color.gold(), title="Kick | Case {}".format(case))
        e.add_field(name="User", value="{0} ({0.id})".format(user))
        e.add_field(name="Moderator", value=str(author))
        e.add_field(name="Reason", value=str(reason))
        return e
    def user_ban(author, user, reason, case):
        e = discord.Embed(color=discord.Color.red(), title="Ban | Case {}".format(case))
        e.add_field(name="User", value="{0} ({0.id})".format(user))
        e.add_field(name="Moderator", value=str(author))
        e.add_field(name="Reason", value=str(reason))
        return e


if not discord.opus.is_loaded():
    # the 'opus' library here is opus.dll on windows
    # or libopus.so on linux in the current directory
    # you should replace this with the location the
    # opus library is located in and with the proper filename.
    # note that on windows this DLL is automatically provided for you
    discord.opus.load_opus('opus')

class VoiceEntry:
    def __init__(self, message, player):
        self.requester = message.author
        self.channel = message.channel
        self.player = player

    def __str__(self):
        fmt = '*{0.title}* uploaded by {0.uploader} and requested by {1.display_name}'
        duration = self.player.duration
        if duration:
            fmt = fmt + ' [length: {0[0]}m {0[1]}s]'.format(divmod(duration, 60))
        return fmt.format(self.player, self.requester)

class VoiceState:
    def __init__(self, bot):
        self.current = None
        self.voice = None
        self.bot = bot
        self.play_next_song = asyncio.Event()
        self.songs = asyncio.Queue()
        self.skip_votes = set() # a set of user_ids that voted
        self.audio_player = self.bot.loop.create_task(self.audio_player_task())

    def is_playing(self):
        if self.voice is None or self.current is None:
            return False

        player = self.current.player
        return not player.is_done()

    @property
    def player(self):
        return self.current.player

    def skip(self):
        self.skip_votes.clear()
        if self.is_playing():
            self.player.stop()

    def toggle_next(self):
        self.bot.loop.call_soon_threadsafe(self.play_next_song.set)

    async def audio_player_task(self):
        while True:
            self.play_next_song.clear()
            self.current = await self.songs.get()
            await self.bot.send_message(self.current.channel, 'Now playing ' + str(self.current))
            self.current.player.start()
            await self.play_next_song.wait()

class Music:
    """Voice related commands.
    Works in multiple servers at once.
    """
    def __init__(self, bot):
        self.bot = bot
        self.voice_states = {}

    def get_voice_state(self, server):
        state = self.voice_states.get(server.id)
        if state is None:
            state = VoiceState(self.bot)
            self.voice_states[server.id] = state

        return state

    async def create_voice_client(self, channel):
        voice = await self.bot.join_voice_channel(channel)
        state = self.get_voice_state(channel.server)
        state.voice = voice

    def __unload(self):
        for state in self.voice_states.values():
            try:
                state.audio_player.cancel()
                if state.voice:
                    self.bot.loop.create_task(state.voice.disconnect())
            except:
                pass

    @commands.command(pass_context=True, no_pm=True)
    async def join(self, ctx, *, channel : discord.Channel):
        """Joins a voice channel."""
        try:
            await self.create_voice_client(channel)
        except discord.ClientException:
            await self.bot.say('Already in a voice channel...')
        except discord.InvalidArgument:
            await self.bot.say('This is not a voice channel...')
        else:
            await self.bot.say('Ready to play audio in ' + channel.name)

    @commands.command(pass_context=True, no_pm=True)
    async def summon(self, ctx):
        """Summons the bot to join your voice channel."""
        summoned_channel = ctx.message.author.voice_channel
        if summoned_channel is None:
            await self.bot.say('You are not in a voice channel.')
            return False

        state = self.get_voice_state(ctx.message.server)
        if state.voice is None:
            state.voice = await self.bot.join_voice_channel(summoned_channel)
        else:
            await state.voice.move_to(summoned_channel)

        return True

    @commands.command(pass_context=True, no_pm=True)
    async def play(self, ctx, *, song : str):
        """Plays a song.
        If there is a song currently in the queue, then it is
        queued until the next song is done playing.
        This command automatically searches as well from YouTube.
        The list of supported sites can be found here:
        https://rg3.github.io/youtube-dl/supportedsites.html
        """
        state = self.get_voice_state(ctx.message.server)
        opts = {
            'default_search': 'auto',
            'quiet': True,
        }

        if state.voice is None:
            success = await ctx.invoke(self.summon)
            if not success:
                return

        try:
            player = await state.voice.create_ytdl_player(song, ytdl_options=opts, after=state.toggle_next)
        except Exception as e:
            fmt = 'An error occurred while processing this request: ```py\n{}: {}\n```'
            await self.bot.send_message(ctx.message.channel, fmt.format(type(e).__name__, e))
        else:
            player.volume = 0.6
            entry = VoiceEntry(ctx.message, player)
            await self.bot.say('Enqueued ' + str(entry))
            await state.songs.put(entry)

    @commands.command(pass_context=True, no_pm=True)
    async def volume(self, ctx, value : int):
        """Sets the volume of the currently playing song."""

        state = self.get_voice_state(ctx.message.server)
        if state.is_playing():
            player = state.player
            player.volume = value / 100
            await self.bot.say('Set the volume to {:.0%}'.format(player.volume))

    @commands.command(pass_context=True, no_pm=True)
    async def pause(self, ctx):
        """Pauses the currently played song."""
        state = self.get_voice_state(ctx.message.server)
        if state.is_playing():
            player = state.player
            player.pause()

    @commands.command(pass_context=True, no_pm=True)
    async def resume(self, ctx):
        """Resumes the currently played song."""
        state = self.get_voice_state(ctx.message.server)
        if state.is_playing():
            player = state.player
            player.resume()

    @commands.command(pass_context=True, no_pm=True)
    async def stop(self, ctx):
        """Stops playing audio and leaves the voice channel.
        This also clears the queue.
        """
        server = ctx.message.server
        state = self.get_voice_state(server)

        if state.is_playing():
            player = state.player
            player.stop()

        try:
            state.audio_player.cancel()
            del self.voice_states[server.id]
            await state.voice.disconnect()
        except:
            pass

    @commands.command(pass_context=True, no_pm=True)
    async def skip(self, ctx):
        """Vote to skip a song. The song requester can automatically skip.
        3 skip votes are needed for the song to be skipped.
        """

        state = self.get_voice_state(ctx.message.server)
        if not state.is_playing():
            await self.bot.say('Not playing any music right now...')
            return

        voter = ctx.message.author
        if voter == state.current.requester:
            await self.bot.say('Requester requested skipping song...')
            state.skip()
        elif voter.id not in state.skip_votes:
            state.skip_votes.add(voter.id)
            total_votes = len(state.skip_votes)
            if total_votes >= 3:
                await self.bot.say('Skip vote passed, skipping song...')
                state.skip()
            else:
                await self.bot.say('Skip vote added, currently at [{}/3]'.format(total_votes))
        else:
            await self.bot.say('You have already voted to skip this song.')

    @commands.command(pass_context=True, no_pm=True)
    async def playing(self, ctx):
        """Shows info about the currently played song."""

        state = self.get_voice_state(ctx.message.server)
        if state.current is None:
            await self.bot.say('Not playing anything.')
        else:
            skip_count = len(state.skip_votes)
            await self.bot.say('Now playing {} [skips: {}/3]'.format(state.current, skip_count))


bot.add_cog(Music(bot))

class moderation:
    def __init__(self, bot):
        self.bot = bot
        
    @checks.mod_or_permissions(manage_channels=True)	
    @commands.command()
    async def die(self):

        await self.bot.say("Bot is shutting down.")
        await self.bot.logout()
    
    @checks.mod_or_permissions(manage_channels=True)
    @commands.command(pass_context=True, no_pm=True)
    async def kick(self, ctx, user : discord.Member, *, reason : str = "*No reason was provided.*"):
        try:
            await self.bot.send_message(user, "You were kicked from **{}** by the moderator **{}** for the reason: {}".format(ctx.message.server.name, ctx.message.author, reason))
            await self.bot.kick(user)
            case = uuid.uuid4()
            kicks.append(objects.Kick(case, ctx.message.server, user, ctx.message.author, reason))
            try:
                for channel in ctx.message.server.channels:
                    if channel.name == "mod-log" or channel.name == "mod_log":
                        await self.bot.send_message(channel, embed=embeds.user_kick(ctx.message.author, user, reason, case))
                        break
            except:
                await self.bot.say("**ProTip:** Having a channel named `#mod_log` or `#mod-log` will allow me to post moderation info.")
        except discord.Forbidden:
            await self.bot.say(embed=embeds.error("I don't have the correct permissions to do that.", ctx))
        except:
            raise
        else:
            await self.bot.say("Successfully kicked " + str(user))

    @checks.mod_or_permissions(manage_channels=True)	
    @commands.command(pass_context=True, no_pm=True, aliases=['purge', 'clear'])

    async def prune(self, ctx, limit : int): # !!prune
        """Deletes the specified amount of messages."""
        global errors
        if not limit > 1:
            await self.bot.say(":no_entry_sign: You can only delete more than 1 message!")
        else:
            counter = -1
            await self.bot.send_typing(ctx.message.channel)
            try:
                async for log in self.bot.logs_from(ctx.message.channel, limit=limit + 1):
                    await self.bot.delete_message(log)
                    counter += 1
                    if counter % 5 == 0:
                        await self.bot.send_typing(ctx.message.channel)
            except Exception as e:
                logging.error(str(e))
                await self.bot.say(embed=embeds.error(str(e), ctx))
            else:
                await self.bot.say(':zap: Deleted {} messages.'.format(counter))

     
    @checks.mod_or_permissions(manage_channels=True)
    @commands.command(pass_context=True, no_pm=True)
    async def ban(self, ctx, user : discord.Member, *, reason : str = "*No reason was provided.*"):
            try:
                await self.bot.send_message(user, "You were banned from **{}** by the moderator **{}** for the reason: {}".format(ctx.message.server.name, ctx.message.author, reason))
                await self.bot.ban(user, delete_message_days=0)
                case = uuid.uuid4()
                bans.append(objects.Banne(case, ctx.message.server, user, ctx.message.author, reason))
                try:
                    for channel in ctx.message.server.channels:
                        if channel.name == "mod-log" or channel.name == "mod_log":
                            await self.bot.send_message(channel, embed=embeds.user_ban(ctx.message.author, user, reason, case))
                            break
                except:
                    await self.bot.say("**ProTip:** Having a channel named `#mod_log` or `#mod-log` will allow me to post moderation info.")
            except discord.Forbidden:
                await self.bot.say(embed=embeds.error("I don't have the correct permissions to do that.", ctx))
            except:
                raise
            else:
                await bot.say("Successfully banned " + str(user))
    @checks.mod_or_permissions(manage_channels=True)
    @commands.command(pass_context=True, no_pm=True)
    async def unban(ctx, user : discord.Member, *, reason : str = "*No reason was provided.*"):
            try:
                await bot.send_message(user, "You were banned from **{}** by the moderator **{}** for the reason: {}".format(ctx.message.server.name, ctx.message.author, reason))
                await bot.ban(user, delete_message_days=0)
                case = uuid.uuid4()
                bans.append(objects.Banne(case, ctx.message.server, user, ctx.message.author, reason))
                try:
                    for channel in ctx.message.server.channels:
                        if channel.name == "mod-log" or channel.name == "mod_log":
                            await bot.send_message(channel, embed=embeds.user_ban(ctx.message.author, user, reason, case))
                            break
                except:
                    await bot.say("**ProTip:** Having a channel named `#mod_log` or `#mod-log` will allow me to post moderation info.")
            except discord.Forbidden:
                await bot.say(embed=embeds.error("I don't have the correct permissions to do that.", ctx))
            except:
                raise
            else:
                await bot.say("Successfully banned " + str(user))
bot.add_cog(moderation(bot))

@bot.event
async def on_ready():
    print('Logged in as')
    print(bot.user.name)
    

@bot.command()

async def hello():

    await bot.say("Hello!")

@bot.command()
async def twat():

	await bot.say("Did you mean <@173547110388465664>")
	
@bot.command()
async def retard():

	await bot.say('Did you mean <@188952933323243520>')
	

@bot.command()
async def echo(*, message: str):

    await bot.say(message)
@bot.command()
async def team():
	"""Bot team"""
	await bot.say(teammessage)
teammessage = ""'''**Discord Username:**  Divexs
**Email:** dhruv61998@gmail.com 
**Github Name:**  thedivexz(edited)
**Discord Username:**  Praise
**Email:**  Acalidien@gmail.com
**Github Name:**  joe7218
**Discord Username:**  Zevfer
**Email:**  Zevfer@thesilentleague.net/ZakariaASekhri@gmail.com
**Github Name:**  Zak-Sekhri'''"" 

@bot.command()
async def add(left : int, right : int):
    """Adds two numbers together. E.g. .add 42 42"""
    await bot.say(left + right)


@bot.command(description='For when you wanna settle the score some other way')
async def choose(*choices : str):
    """Chooses between multiple choices."""
    await bot.say(random.choice(choices))

@bot.command()
async def repeat(times : int, content='repeating...'):
    """Repeats a message multiple times."""
    for i in range(times):
        await bot.say(content)

@bot.command()
async def joined(member : discord.Member):
    """Says when a member joined."""
    await bot.say('{0.name} joined in {0.joined_at}'.format(member))

@bot.group(pass_context=True)
async def cool(ctx):
    """Says if a user is cool.
    In reality this just checks if a subcommand is being invoked.
    """
    if ctx.invoked_subcommand is None:
        await bot.say('No, {0.subcommand_passed} is not cool'.format(ctx))

@cool.command(name='bot')
async def _bot():
    """Is the bot cool?"""
    await bot.say('Yes, the bot is cool.')

@bot.command(pass_context=True, hidden=True)
async def setplaying(ctx, *, game : str): # !!setplaying
    if ctx.message.author.id == '188952933323243520' or ctx.message.author.id == '173547110388465664':
        try:
            await bot.change_presence(game=discord.Game(name=game), status=ctx.message.server.me.status)
            logging.info("Set game to " + str(game))
        except Exception as e:
            await bot.say("Failed to set game: {}".format(str(e)), ctx)
    else:
         await bot.say("You must be a bot admin to do this!")
        
@bot.command()
async def serverid():
	await bot.say('The ID of this server is 350088997995020298') #need to change this so i get the id of any server it is in


@bot.command(pass_context=True)
async def getid(ctx):
    await bot.say(ctx.message.author.id)
    
           
@bot.command(pass_context=True, aliases=["guilds"])
async def servers(ctx): # !!servers
        """Shows info on Etos's server's."""
        await bot.send_typing(ctx.message.channel)
        color = discord.Color.default()
        if ctx.message.server is not None:
            color = ctx.message.server.me.color
        e = discord.Embed(color=color, title="Etos Servers", description="An average server has...")
        tot = len(bot.servers)
        roles = []
        verification = 0
        for s in bot.servers:
            if str(s.verification_level) == "low":
                verification += 1
            elif str(s.verification_level) == "medium":
                verification += 2
            elif str(s.verification_level) == "high":
                verification += 3
            elif str(s.verification_level) == 4:
                verification += 4
            for r in s.roles:
                roles.append(r)
        e.add_field(name="Users", value=sum(1 for _ in bot.get_all_members()) / tot)
        e.add_field(name="Channels", value=sum(1 for _ in bot.get_all_channels()) / tot)
        e.add_field(name="Emojis", value=sum(1 for _ in bot.get_all_emojis()) / tot)
        e.add_field(name="Roles", value=len(roles) / tot)
        e.set_footer(text="{} servers total".format(tot))
        verification = verification / tot
        verif_name = None
        if round(verification) == 0:
            verif_name = "None"
        elif round(verification) == 1:
            verif_name = "Low"
        elif round(verification) == 2:
            verif_name = "Medium"
        elif round(verification) == 3:
            verif_name = "High / (╯°□°）╯︵ ┻━┻"
        elif round(verification) == 4:
            verif_name = "Extreme / ┻━┻ ﾐヽ(ಠ益ಠ)ノ彡┻━┻"
        e.add_field(name="Verification", value="{} ({})".format(verification, verif_name))
        await bot.say(embed=e)

@bot.command(pass_context=True, aliases = ['botinfo', 'stats', 'about'])
async def info(ctx): # !!info
        """Shows bot info."""
        try:
            global start_time
            global errors
            global st_servers
            await bot.send_typing(ctx.message.channel)
            pyver = ""
            for x in sys.version_info[0:3]:
                if x == sys.version_info[2]:
                    pyver += str(x)
                else:
                    pyver += str(x) + "."
            users = sum(1 for _ in bot.get_all_members())
            logging.debug("Got all bot users")
            color = discord.Color.default()
            if ctx.message.server is not None:
                color = ctx.message.server.me.color
            embed = discord.Embed(color=color, title="Etos Statistics", description="Made by the Etos devs")
            embed.set_footer(text="Etos")
            embed.set_thumbnail(url=bot.user.avatar_url)
            embed.add_field(name="> Usage", value="**• servers:** {}\n**• Users:** {}".format(len(bot.servers), users))
            logging.debug("Created Embed")
            await bot.say(embed=embed)
        except:
            raise
            
cmds_this_session = []

@bot.command(pass_context=True)
async def ping(self, ctx): # !!ping
        """Pong!"""
        t = time.time()
        mesg = await self.bot.say("Pong!")
        t2 = time.time() - t
        await self.bot.edit_message(mesg, "Pong! **{}ms**".format(round(t2*1000)))
        
@bot.command()

async def yt(ctx):
    """Youtube search link"""
    await bot.say('https://www.youtube.com/results?search_query={}'.format (ctx))

@bot.command()

async def google(ctx):
    """Google search link"""
    await bot.say('https://www.google.com.au/search?q={}'.format(ctx))
    
@bot.event
async def on_server_join(server): # When the bot joins a server
    print(color.GREEN + "Joined server " + str(server.id)+ " (" + str(server.name) + ")")
    logging.info("Joined server {0.name} (ID: {0.id})".format(server))
    await post_stats()
    try:
        await bot.send_message(server.default_channel, ':wave: Hi, I\'m Etos! For help on what I can do, type `.help`.')
    except:
        pass
    await bot.send_message(bot.get_channel(id="334385091482484736"), embed=embeds.server_join(server))

@bot.event
async def on_server_remove(server): # When the bot leaves a server
    print(color.RED + "Left server " + str(server.id) + " (" + str(server.name) + ")")
    logging.info("Left server {0.name} (ID: {0.id})".format(server))
    await post_stats()
    await bot.send_message(bot.get_channel(id="334385091482484736"), embed=embeds.server_leave(server))

@bot.event
async def on_member_join(member): # When a member joins a server
    if str(member.server.id) == "294215057129340938" and not args.use_beta_token:
        await bot.send_message(member.server.get_channel("314136139755945984"), ":wave: Welcome " + str(member.mention) + " to the server!")

@bot.event
async def on_member_ban(member): # When a member is banned from a server
    pass

@bot.event
async def on_command_error(error, ctx): # When a command error occurrs
    global errors
    if isinstance(error, discord.ext.commands.errors.CommandNotFound):
        pass
    elif isinstance(error, discord.ext.commands.errors.CheckFailure):
        if str(ctx.command).startswith("cmd"):
            await bot.send_message(ctx.message.channel, embed=embeds.permission_denied("You need a role named `Admin` to do that."))
        else:
            await bot.send_message(ctx.message.channel, embed=embeds.permission_denied())
    elif isinstance(error, discord.ext.commands.errors.MissingRequiredArgument):
        await bot.send_message(ctx.message.channel, embed=embeds.invalid_syntax("You're missing required arguments! Type `!!help {}` for more help.".format(ctx.command)))
    elif isinstance(error, TimeoutError):
        pass
    elif isinstance(error, discord.ext.commands.DisabledCommand):
        await bot.send_message(ctx.message.channel, ":tools: This command is disabled!")
    elif isinstance(error, discord.ext.commands.errors.BadArgument):
        if ctx.command.name == "status":
            await bot.send_message(ctx.message.channel, embed=embeds.invalid_syntax("That isn't a valid subcommand. Try typing '!!status help' for help."))
        else:
            await bot.send_message(ctx.message.channel, embed=embeds.invalid_syntax("Invalid argument!"))
    elif isinstance(error, discord.errors.Forbidden) or isinstance(error, discord.Forbidden):
        pass
    elif isinstance(error, discord.ext.commands.errors.NoPrivateMessage):
        await bot.send_message(ctx.message.channel, embed=embeds.error("This command can't be used in private messages.", ctx))
    else:
        if ctx.command:
            errors.append(error)
            _type, _value, _traceback = sys.exc_info()
            logging.error(error.original)
            if _traceback is not None:
                logging.error(_traceback)
            await bot.send_message(ctx.message.channel, embed=embeds.error(error, ctx))
            try:
                await bot.send_message(bot.get_channel(id="334385091482484736"), embed=embeds._err(error, ctx))
            except Exception as e:
                logging.warn("Failed to send error message to log channel")
                logging.warn("{0}: {1}".format(type(e).__name__, e))
                logging.warn(traceback.format_exc())



bot.run('TOKEN')

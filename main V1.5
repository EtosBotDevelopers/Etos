import discord
from discord.ext import commands
import math
import random
import checks
import logging
import uuid
bot = commands.Bot(command_prefix='.', description='test bot')



@bot.event
async def on_ready():
    print('Logged in as')
    print(bot.user.name)
    

@bot.command()

async def hello():

    await bot.say("Hello!")

@bot.command()
async def twat():

	await bot.say("Did you mean <@173547110388465664>")
	
@bot.command()
async def retard():

	await bot.say('Did you mean <@188952933323243520>')
	
@checks.mod_or_permissions(manage_channels=True)	
@bot.command()
async def die():

	await bot.say("Bot is shutting down.")
	await bot.logout()

@bot.command()
async def echo(*, message: str):

    await bot.say(message)
@bot.command()
async def team():
	"""Bot team"""
	await bot.say(teammessage)
teammessage = ""'''**Discord Username:**  Divexs
**Email:** dhruv61998@gmail.com 
**Github Name:**  thedivexz(edited)
**Discord Username:**  Praise
**Email:**  Acalidien@gmail.com
**Github Name:**  joe7218
**Discord Username:**  Zevfer
**Email:**  Zevfer@thesilentleague.net/ZakariaASekhri@gmail.com
**Github Name:**  Zak-Sekhri'''"" 

@bot.command()
async def add(left : int, right : int):
    """Adds two numbers together. E.g. .add 42 42"""
    await bot.say(left + right)


@bot.command(description='For when you wanna settle the score some other way')
async def choose(*choices : str):
    """Chooses between multiple choices."""
    await bot.say(random.choice(choices))

@bot.command()
async def repeat(times : int, content='repeating...'):
    """Repeats a message multiple times."""
    for i in range(times):
        await bot.say(content)

@bot.command()
async def joined(member : discord.Member):
    """Says when a member joined."""
    await bot.say('{0.name} joined in {0.joined_at}'.format(member))

@bot.group(pass_context=True)
async def cool(ctx):
    """Says if a user is cool.
    In reality this just checks if a subcommand is being invoked.
    """
    if ctx.invoked_subcommand is None:
        await bot.say('No, {0.subcommand_passed} is not cool'.format(ctx))

@cool.command(name='bot')
async def _bot():
    """Is the bot cool?"""
    await bot.say('Yes, the bot is cool.')

@bot.command(pass_context=True)
@checks.mod_or_permissions(manage_channels=True)
async def kick(ctx, user:discord.Member, *, reason:str=None):
    """Kicks someone from the server"""
    if reason is None:
        reason = "The ban hammer has spoken."
        try:
            await bot.kick(user)
        except discord.errors.Forbidden:
                await bot.say("Either I do not have permission, or you do not")
                return

@bot.command()
async def serverid():
	await bot.say('The ID of this server is 350088997995020298') #need to change this so i get the id of any server it is in


@bot.command(pass_context=True, hidden=True)
async def get_id(ctx):
    await bot.say(ctx.message.author.id)
@bot.command(pass_context=True, no_pm=True)
async def join(ctx, *, channel : discord.Channel = None): # !!join
        """Joins a voice channel."""
        global errors
        if channel is None:
            channel = ctx.message.author.voice_channel
        await bot.send_typing(ctx.message.channel)
        try:
            await create_voice(channel)
        except discord.errors.ClientException:
            await bot.say(embed=embeds.error("Already in a voice channel!", ctx))
        except TimeoutError:
            await bot.say(embed=embeds.error("Connection timed out.", ctx))
        except discord.errors.Forbidden:
            await bot.say(embed=embeds.error("I don't have permission to join that voice channel!", ctx))
        except discord.errors.InvalidArgument:
            await bot.say(embed=embeds.invalid_syntax("{} is not a valid voice channel.".format(ctx.message.author.voice_channel)))
        except Exception as e:
            
            await bot.say("I couldn't connect to that voice channel.", ctx)
        else:
            await bot.say(':notes: Ready to play audio in `' + channel.name + '`')

@checks.mod_or_permissions(manage_channels=True)	
@bot.command(pass_context=True, no_pm=True, aliases=['purge', 'clear'])
async def prune(ctx, limit : int): # !!prune
        """Deletes the specified amount of messages. .prune (amount) (who)"""
        global errors
        if not limit > 1:
            await bot.say(":no_entry_sign: You can only delete more than 1 message!")
        else:
            counter = -1
            await bot.send_typing(ctx.message.channel)
            try:
                async for log in bot.logs_from(ctx.message.channel, limit=limit + 1):
                    await bot.delete_message(log)
                    counter += 1
                    if counter % 5 == 0:
                        await bot.send_typing(ctx.message.channel)
            except Exception as e:
                logging.error(str(e))
                await bot.say(embed=embeds.error(str(e), ctx))
            else:
                await bot.say(':zap: Deleted {} messages.'.format(counter))
                
@checks.mod_or_permissions(manage_channels=True)
@bot.command(pass_context=True, no_pm=True)
async def ban(ctx, user : discord.Member, *, reason : str = "*No reason was provided.*"):
        try:
            await bot.send_message(user, "You were banned from **{}** by the moderator **{}** for the reason: {}".format(ctx.message.server.name, ctx.message.author, reason))
            await bot.ban(user, delete_message_days=0)
            case = uuid.uuid4()
            bans.append(objects.Banne(case, ctx.message.server, user, ctx.message.author, reason))
            try:
                for channel in ctx.message.server.channels:
                    if channel.name == "mod-log" or channel.name == "mod_log":
                        await bot.send_message(channel, embed=embeds.user_ban(ctx.message.author, user, reason, case))
                        break
            except:
                await bot.say("**ProTip:** Having a channel named `#mod_log` or `#mod-log` will allow me to post moderation info.")
        except discord.Forbidden:
            await bot.say(embed=embeds.error("I don't have the correct permissions to do that.", ctx))
        except:
            raise
        else:
            await bot.say("Successfully banned " + str(user))
@checks.mod_or_permissions(manage_channels=True)
@bot.command(pass_context=True, no_pm=True)
async def unban(ctx, user : discord.Member, *, reason : str = "*No reason was provided.*"):
        try:
            await bot.send_message(user, "You were banned from **{}** by the moderator **{}** for the reason: {}".format(ctx.message.server.name, ctx.message.author, reason))
            await bot.ban(user, delete_message_days=0)
            case = uuid.uuid4()
            bans.append(objects.Banne(case, ctx.message.server, user, ctx.message.author, reason))
            try:
                for channel in ctx.message.server.channels:
                    if channel.name == "mod-log" or channel.name == "mod_log":
                        await bot.send_message(channel, embed=embeds.user_ban(ctx.message.author, user, reason, case))
                        break
            except:
                await bot.say("**ProTip:** Having a channel named `#mod_log` or `#mod-log` will allow me to post moderation info.")
        except discord.Forbidden:
            await bot.say(embed=embeds.error("I don't have the correct permissions to do that.", ctx))
        except:
            raise
        else:
            await bot.say("Successfully banned " + str(user))

bot.run('BOT TOKEN HERE')
